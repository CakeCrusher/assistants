name: Rust CI

on:
  push:
    paths:
      - "**.rs"
      - "**.toml"
      - "**/workflows/**.yml"
    branches: [main]
  pull_request:
    paths:
      - "**.rs"
      - "**.toml"
      - "**/workflows/**.yml"
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Start Docker containers
        run: |
          docker-compose -f docker/docker-compose.yml up -d
          while ! docker exec -i pg pg_isready -U postgres; do sleep 1; done
          docker exec -i pg psql -U postgres -c "CREATE DATABASE mydatabase;" > /dev/null 2>&1 || echo "Database already exists"
          docker exec -i pg psql -U postgres -d mydatabase < assistants-core/src/migrations.sql > /dev/null 2>&1 || echo "Migrations already applied"

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:secret@localhost:5432/mydatabase
          REDIS_URL: redis://127.0.0.1/
          S3_ENDPOINT: http://localhost:9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin
          S3_BUCKET_NAME: mybucket
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL_API_KEY: ${{ secrets.MODEL_API_KEY }}
          MODEL_URL: ${{ secrets.MODEL_URL }}
        run: RUST_TEST_THREADS=1 cargo test

  docker-build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Start Docker containers
        run: |
          docker-compose -f docker/docker-compose.yml up -d postgres
          while ! docker exec -i pg pg_isready -U postgres; do sleep 1; done
          docker exec -i pg psql -U postgres -c "CREATE DATABASE mydatabase;" > /dev/null 2>&1 || echo "Database already exists"
          docker exec -i pg psql -U postgres -d mydatabase < assistants-core/src/migrations.sql > /dev/null 2>&1 || echo "Migrations already applied"

      - name: Build Rust code
        env:
          DATABASE_URL: postgres://postgres:secret@localhost:5432/mydatabase
        run: |
          cargo build --release --bin run_consumer
          cargo build --release --bin assistants-api-communication

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/assistants:latest
          file: docker/Dockerfile
          platforms: linux/amd64

  docker-build-mac:
    needs: test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          override: true

      - name: Setup docker (missing on MacOS)
        if: runner.os == 'macos'
        run: |
          brew install docker
          colima start
          
          # For testcontainers to find the Colima socket
          # https://github.com/abiosoft/colima/blob/main/docs/FAQ.md#cannot-connect-to-the-docker-daemon-at-unixvarrundockersock-is-the-docker-daemon-running
          sudo ln -sf $HOME/.colima/default/docker.sock /var/run/docker.sock

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start Docker containers
        run: |
          docker-compose -f docker/docker-compose.yml up -d postgres
          while ! docker exec -i pg pg_isready -U postgres; do sleep 1; done
          docker exec -i pg psql -U postgres -c "CREATE DATABASE mydatabase;" > /dev/null 2>&1 || echo "Database already exists"
          docker exec -i pg psql -U postgres -d mydatabase < assistants-core/src/migrations.sql > /dev/null 2>&1 || echo "Migrations already applied"

      - name: Build Rust code
        env:
          DATABASE_URL: postgres://postgres:secret@localhost:5432/mydatabase
        run: |
          cargo build --release --bin run_consumer
          cargo build --release --bin assistants-api-communication

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/assistants:latest
          file: docker/Dockerfile
          platforms: linux/arm64

  docker-build-code-interpreter:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/assistants-code-interpreter:latest, ${{ secrets.DOCKERHUB_USERNAME }}/assistants-code-interpreter:latest
          file: docker/Dockerfile.code-interpreter
          platforms: linux/amd64,linux/arm64
